#if !os(macOS)
import XCTest

extension ArgumentTests {
    // DO NOT MODIFY: This is autogenerated, use: 
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentTests = [
        ("test_help", test_help),
        ("test_initializer", test_initializer),
        ("test_parse_invalidValue", test_parse_invalidValue),
        ("test_parse_noArguments", test_parse_noArguments),
        ("test_parse_validValue", test_parse_validValue),
        ("test_priority", test_priority),
        ("test_usage", test_usage),
    ]
}

extension ArgumentTypesTests {
    // DO NOT MODIFY: This is autogenerated, use: 
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentTypesTests = [
        ("test_bool_invalidValue", test_bool_invalidValue),
        ("test_bool_noValue", test_bool_noValue),
        ("test_bool_validValue", test_bool_validValue),
        ("test_collections_invalidValue", test_collections_invalidValue),
        ("test_collections_noValue", test_collections_noValue),
        ("test_collections_validValue", test_collections_validValue),
        ("test_floatingPoints_invalidValue", test_floatingPoints_invalidValue),
        ("test_floatingPoints_noValue", test_floatingPoints_noValue),
        ("test_floatingPoints_validValue", test_floatingPoints_validValue),
        ("test_integers_invalidValue", test_integers_invalidValue),
        ("test_integers_noValue", test_integers_noValue),
        ("test_integers_validValue", test_integers_validValue),
        ("test_string_noValue", test_string_noValue),
        ("test_string_validValue", test_string_validValue),
    ]
}

extension CommandTests {
    // DO NOT MODIFY: This is autogenerated, use: 
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommandTests = [
        ("test_generateHelp_argumentsWithDocumentation", test_generateHelp_argumentsWithDocumentation),
        ("test_generateHelp_argumentsWithoutDocumentation", test_generateHelp_argumentsWithoutDocumentation),
        ("test_generateHelp_minimal", test_generateHelp_minimal),
        ("test_generateHelp_optionsWithDocumentation", test_generateHelp_optionsWithDocumentation),
        ("test_generateHelp_optionsWithoutDocumentation", test_generateHelp_optionsWithoutDocumentation),
        ("test_generateHelp_subCommand", test_generateHelp_subCommand),
        ("test_generateHelp_withDocumentation", test_generateHelp_withDocumentation),
        ("test_generateUsage_minimal", test_generateUsage_minimal),
        ("test_generateUsage_parameters", test_generateUsage_parameters),
        ("test_generateUsage_subCommand", test_generateUsage_subCommand),
    ]
}

extension ExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use: 
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExtensionsTests = [
        ("testLevenshteinDistance", testLevenshteinDistance),
    ]
}

extension GroupCommandTests {
    // DO NOT MODIFY: This is autogenerated, use: 
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GroupCommandTests = [
        ("testGenerateHelp", testGenerateHelp),
        ("testGenerateUsage", testGenerateUsage),
    ]
}

extension OptionTests {
    // DO NOT MODIFY: This is autogenerated, use: 
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OptionTests = [
        ("test_help", test_help),
        ("test_initializer", test_initializer),
        ("test_parse_invalidValue", test_parse_invalidValue),
        ("test_parse_noArguments", test_parse_noArguments),
        ("test_parse_noStart", test_parse_noStart),
        ("test_parse_noValue", test_parse_noValue),
        ("test_priority", test_priority),
        ("test_usage", test_usage),
    ]
}

extension SubCommandTests {
    // DO NOT MODIFY: This is autogenerated, use: 
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubCommandTests = [
        ("test_help", test_help),
        ("test_parse_invalidValue", test_parse_invalidValue),
        ("test_parse_noArguments", test_parse_noArguments),
        ("test_parse_validCommand", test_parse_validCommand),
        ("test_usage", test_usage),
    ]
}

extension ToolTests {
    // DO NOT MODIFY: This is autogenerated, use: 
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ToolTests = [
        ("testInitializer", testInitializer),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ArgumentTests.__allTests__ArgumentTests),
        testCase(ArgumentTypesTests.__allTests__ArgumentTypesTests),
        testCase(CommandTests.__allTests__CommandTests),
        testCase(ExtensionsTests.__allTests__ExtensionsTests),
        testCase(GroupCommandTests.__allTests__GroupCommandTests),
        testCase(OptionTests.__allTests__OptionTests),
        testCase(SubCommandTests.__allTests__SubCommandTests),
        testCase(ToolTests.__allTests__ToolTests),
    ]
}
#endif
